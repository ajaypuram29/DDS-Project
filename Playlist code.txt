#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure for each song (node)
typedef struct Song {
    char name[50];
    struct Song *next;
} Song;

Song *head = NULL;  // Playlist head
// Function to add song at end
void addSong(char name[]) {
    Song *newSong = (Song *)malloc(sizeof(Song));
    strcpy(newSong->name, name);
    newSong->next = NULL;

    if (head == NULL) {
        head = newSong;
    } else {
        Song *temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newSong;
    }
    printf("‚úÖ Song '%s' added to playlist.\n", name);
}

// Function to display playlist
void displayPlaylist() {
    if (head == NULL) {
        printf("üìÇ Playlist is empty.\n");
        return;
    }
    Song *temp = head;
    printf("\nüé∂ Current Playlist:\n");
    while (temp != NULL) {
        printf(" - %s\n", temp->name);
        temp = temp->next;
    }
}
// Function to delete a song by name
void deleteSong(char name[]) {
    if (head == NULL) {
        printf("‚ö†Ô∏è Playlist is empty. Nothing to delete.\n");
        return;
    }
    Song *temp = head, *prev = NULL;
    // If head node itself holds the song
    if (strcmp(temp->name, name) == 0) {
        head = temp->next;
        free(temp);
        printf("üóëÔ∏è Song '%s' deleted.\n", name);
        return;
    }

    // Search for the song
    while (temp != NULL && strcmp(temp->name, name) != 0) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("‚ö†Ô∏è Song '%s' not found in playlist.\n", name);
        return;
    }

    prev->next = temp->next;
    free(temp);
    printf("üóëÔ∏è Song '%s' deleted.\n", name);
}

// Main function (Menu driven)
int main() {
    int choice;
    char songName[50];

    do {
        printf("\n==== Music Playlist Menu ====\n");
        printf("1. Add Song\n");
        printf("2. Display Playlist\n");
        printf("3. Delete Song\n");
        printf("4. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);
        getchar(); // clear newline from buffer

        switch (choice) {
            case 1:
                printf("Enter song name: ");
                fgets(songName, sizeof(songName), stdin);
                songName[strcspn(songName, "\n")] = 0; // remove newline
                addSong(songName);
                break;

            case 2:
                displayPlaylist();
                break;

            case 3:
                printf("Enter song name to delete: ");
                fgets(songName, sizeof(songName), stdin);
                songName[strcspn(songName, "\n")] = 0;
                deleteSong(songName);
                break;

            case 4:
                printf("üëã Exiting... Goodbye!\n");
                break;

            default:
                printf("‚ö†Ô∏è Invalid choice.\n");
        }
    } while (choice != 4);

    return 0;
}
